name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: ['*']
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  CACHE_VERSION: v1

# Concurrency settings to prevent multiple deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # Stage 1: Code Quality & Security Analysis (Parallel)
  lint-and-format:
    name: üßπ Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_VERSION }}-${{ env.CACHE_VERSION }}-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint || true # Continue on error for now

      - name: Run Prettier
        run: npm run format:check || true # Continue on error for now

      - name: TypeScript type check
        run: npm run type-check

  security-scan:
    name: üîí Security Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || echo "::warning::npm audit found vulnerabilities"

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  dependency-review:
    name: üì¶ Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Stage 2: Unit Tests (Parallel with Stage 1)
  unit-tests:
    name: üß™ Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        test-group: [unit, workers, components]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test environment
        run: |
          echo "HYPERDRIVE=test_hyperdrive_connection" >> .dev.vars.test
          echo "NODE_ENV=test" >> .dev.vars.test

      - name: Run unit tests - ${{ matrix.test-group }}
        run: npm run test:${{ matrix.test-group }} -- --coverage --reporter=json --reporter=default
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/coverage-final.json
          flags: ${{ matrix.test-group }}
          name: codecov-${{ matrix.test-group }}

  # Stage 3: Integration Tests (After Unit Tests)
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [unit-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage/

  # Stage 4: Build & Bundle Analysis
  build-and-analyze:
    name: üèóÔ∏è Build & Bundle Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [lint-and-format]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build

      - name: Analyze bundle size
        run: |
          npm run analyze:bundle || echo "Bundle analysis not configured"

      - name: Check build artifacts
        run: |
          ls -la build/
          du -sh build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 30

  # Stage 5: End-to-End Tests (Preview Environment)
  e2e-tests:
    name: üé≠ E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [integration-tests, build-and-analyze]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Deploy to preview environment
        id: preview-deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env preview
          secrets: |
            HYPERDRIVE
            DATABASE_URL
        env:
          HYPERDRIVE: ${{ secrets.HYPERDRIVE_PREVIEW }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_PREVIEW }}

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          BASE_URL: ${{ steps.preview-deploy.outputs.deployment-url }}
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            tests/e2e/results/
            tests/e2e/playwright-report/

  # Stage 6: Performance & Accessibility Tests
  performance-tests:
    name: ‚ö° Performance & Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [e2e-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run load tests
        run: npm run test:load || echo "Load tests not configured"

  # Stage 7: Deployment Gates & Promotion
  deployment-gate:
    name: üö™ Deployment Gate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [security-scan, integration-tests, performance-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check deployment criteria
        run: |
          echo "‚úÖ All tests passed"
          echo "‚úÖ Security scan completed"
          echo "‚úÖ Performance thresholds met"
          echo "üöÄ Ready for production deployment"

  # Stage 8: Production Deployment
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [deployment-gate]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run database migrations
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: d1 migrations apply ${{ secrets.D1_DATABASE_ID }} --remote

      - name: Deploy to production
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env production
          secrets: |
            HYPERDRIVE
            DATABASE_URL
        env:
          HYPERDRIVE: ${{ secrets.HYPERDRIVE_PRODUCTION }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_PRODUCTION }}

      - name: Post-deployment verification
        run: |
          curl -f ${{ steps.deploy.outputs.deployment-url }}/health || exit 1
          echo "‚úÖ Production deployment verified"

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Stage 9: Post-deployment monitoring setup
  post-deployment:
    name: üìä Post-deployment Setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup monitoring alerts
        run: |
          echo "Setting up monitoring and alerting..."
          # Configure Sentry, DataDog, or other monitoring tools

      - name: Run smoke tests
        run: |
          # Run critical path smoke tests against production
          curl -f ${{ needs.deploy-production.outputs.deployment-url }}/api/books
          echo "‚úÖ Smoke tests passed"

      - name: Update deployment tracking
        run: |
          echo "Updating deployment tracking systems..."
          # Update deployment tracking, feature flags, etc.